"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const helper_1 = require("power-di/helper");
const getInstance_1 = require("./getInstance");
const typeLoader_1 = require("./typeLoader");
const appctx_1 = require("./appctx");
const utils_1 = require("power-di/utils");
/**
 * register component
 * @export
 * @param {InstanceSource} from 'Context' | 'Application'
 * @param {*} [classType] register component
 * @param {*} [keyType] the key of register component, default component self
 * @returns void
 */
function register(from, classType, keyType) {
    return (target) => {
        const clsType = classType || target;
        typeLoader_1.register(clsType, keyType || clsType, from);
    };
}
exports.register = register;
/**
 * inject in context
 *
 * @export
 * @param {*} [keyType]
 * @returns
 */
function context(keyType) {
    return register('Context', undefined, keyType);
}
exports.context = context;
/**
 * inject in application
 *
 * @export
 * @param {*} [keyType]
 * @returns
 */
function application(keyType) {
    return register('Application', undefined, keyType);
}
exports.application = application;
/**
 * inject
 * type: class or string
 */
function inject(type) {
    return (target, key) => {
        helper_1.inject({ type })(target, key);
        const clsType = utils_1.getClsTypeByDecorator(type, target, key);
        let value;
        Object.defineProperty(target, key, {
            configurable: true,
            get() {
                if (value !== undefined) {
                    return value;
                }
                const ctx = appctx_1.getCtx(this);
                const app = appctx_1.getApp(this) || (ctx && ctx.app);
                value = getInstance_1.getInstance(clsType, app, ctx);
                return target[key];
            }
        });
    };
}
exports.inject = inject;
/**
 * lazy inject
 * type: class or string
 */
function lazyInject(type) {
    return (target, key) => {
        helper_1.lazyInject({ type })(target, key);
        const clsType = utils_1.getClsTypeByDecorator(type, target, key);
        const descriptor = Object.getOwnPropertyDescriptor(target, key);
        const defaultValue = descriptor && descriptor.value;
        Object.defineProperty(target, key, {
            configurable: true,
            get: function () {
                const ctx = appctx_1.getCtx(this);
                const app = appctx_1.getApp(this) || (ctx && ctx.app);
                const value = getInstance_1.getInstance(clsType, app, ctx);
                return value !== undefined ? value : defaultValue;
            },
        });
    };
}
exports.lazyInject = lazyInject;
