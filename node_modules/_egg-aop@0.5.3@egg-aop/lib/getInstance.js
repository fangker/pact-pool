"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("power-di/utils");
const appctx_1 = require("./appctx");
const typeLoader_1 = require("./typeLoader");
/** createInstanceHooks */
const ciHooks = [];
function setCreateInstanceHook(func) {
    ciHooks.push(func);
}
exports.setCreateInstanceHook = setCreateInstanceHook;
function removeCreateInstanceHook(func) {
    const index = ciHooks.indexOf(func);
    if (index >= 0) {
        ciHooks.splice(index, 1);
    }
}
exports.removeCreateInstanceHook = removeCreateInstanceHook;
function clearCreateInstanceHook() {
    ciHooks.splice(0);
}
exports.clearCreateInstanceHook = clearCreateInstanceHook;
exports.contextTypeSymbol = Symbol('contextType');
function injectInstance(ioc, inst, app, ctx) {
    ioc.inject(inst, (_globalType, typeCls) => {
        return getInstance(typeCls, app, ctx);
    });
}
exports.injectInstance = injectInstance;
function getInstance(clsType, app, ctx) {
    let ioc = undefined;
    const { useCtxProxyForAppComponent, autoRegisterToCtx } = app.config.aop;
    if (autoRegisterToCtx && !typeLoader_1.typeLoader.has(clsType)) {
        typeLoader_1.register(clsType, clsType, clsType[exports.contextTypeSymbol] || 'Context');
    }
    const targetClsType = typeLoader_1.typeLoader.get(clsType);
    if (!targetClsType) {
        throw new Error(`ClassType [${utils_1.getGlobalType(clsType)}] NOT found in typeLoader!`);
    }
    const from = targetClsType[exports.contextTypeSymbol];
    if (from === 'Application') {
        ioc = useCtxProxyForAppComponent ? ctx.iocContext : app.iocContext;
    }
    else if (from === 'Context') {
        ioc = ctx.iocContext;
    }
    else {
        throw new Error(`ioc context NOT found! [${utils_1.getGlobalType(clsType)}]`);
    }
    let value = ioc.get(clsType);
    if (value) {
        return value;
    }
    if (from === 'Application') {
        if (!app) {
            throw new Error(`inject [${utils_1.getGlobalType(clsType)}] MUST in Application/Context class instance.`);
        }
        if (useCtxProxyForAppComponent) {
            value = app.iocContext.get(clsType);
            if (!value) {
                value = new targetClsType(app);
                appctx_1.setApp(value, app);
                app.iocContext.register(value, clsType);
                injectInstance(app.iocContext, value, app, ctx);
            }
            value = new Proxy(value, {
                get(target, property) {
                    if (property === appctx_1.ctxSymbol) {
                        return ctx;
                    }
                    if (property === 'constructor') {
                        return target[property];
                    }
                    return typeof target[property] === 'function' ? target[property].bind(value) : target[property];
                }
            });
            value = ciHooks.reduce((pre, cur) => cur(pre, app), value);
        }
        else {
            value = ciHooks.reduce((pre, cur) => cur(pre, app), new targetClsType(app));
            appctx_1.setApp(value, app);
        }
    }
    else if (from === 'Context') {
        if (!ctx) {
            throw new Error(`inject [${utils_1.getGlobalType(clsType)}] MUST in Context class instance.`);
        }
        value = ciHooks.reduce((pre, cur) => cur(pre, app, ctx), new targetClsType(ctx));
        appctx_1.setCtx(value, ctx);
    }
    ioc.register(value, clsType);
    injectInstance(ioc, value, app, ctx);
    return value;
}
exports.getInstance = getInstance;
