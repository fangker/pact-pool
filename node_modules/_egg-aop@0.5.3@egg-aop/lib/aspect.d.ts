export declare type Throwable = Error | any;
export declare const FunctionContextSymbol: unique symbol;
export interface FunctionContext<T = any> {
    readonly inst: T;
    readonly functionName: string;
    args: any[];
    ret: any;
    err: Error;
}
export interface AspectPoint<T = any> {
    before?: (context: FunctionContext<T>) => void;
    after?: (context: FunctionContext<T>) => void;
    error?: (context: FunctionContext<T>) => void;
}
export declare function funcWrapper(point: AspectPoint, fn: Function): any;
export declare function aspect<T = any>(point?: AspectPoint<T>): (target: any, key: string, descriptor: any) => {
    configurable: boolean;
    get(): any;
    set(value: Function): void;
};
