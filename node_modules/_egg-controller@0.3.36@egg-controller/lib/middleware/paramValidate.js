"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const Parameter = require("parameter");
const param_1 = require("../param");
const error_1 = require("../error");
function paramValidateMiddleware(app, typeInfo) {
    if (!app.config.controller.paramValidate) {
        return;
    }
    const parameter = new Parameter({ validateRoot: true });
    return function (ctx, next) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const paramData = yield param_1.getParamData(ctx, typeInfo);
            typeInfo.paramTypes.forEach((param, index) => {
                if (!param.validateType) {
                    return;
                }
                let errorMsg = 'param error';
                const paramName = param.name;
                const rule = { [paramName]: param.validateType };
                const data = typeof paramData[index] !== 'undefined' ? { [paramName]: paramData[index] } : {};
                let error;
                try {
                    error = parameter.validate(rule, data);
                }
                catch (err) {
                    error = err;
                }
                if (error) {
                    const reason = [
                        `param validate fail，paramName：${paramName}`,
                        `Value：${JSON.stringify(paramData[index])}`,
                        `Rule：${JSON.stringify(rule)}`,
                        `Info：${JSON.stringify(error)}`,
                    ].join(', ');
                    if (ctx.app.env !== 'prod') {
                        errorMsg = reason;
                    }
                    else {
                        ctx.logger.info(`[egg-controller] param error, request: ${reason}`);
                    }
                    throw new error_1.ParamValidateError(errorMsg);
                }
            });
            return next();
        });
    };
}
exports.paramValidateMiddleware = paramValidateMiddleware;
