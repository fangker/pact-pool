/**
 * inject
 * type: class or string
 * @param {{ type: any }} { type }
 * @returns
 * @memberof Decorators
 */
export declare function inject({ type }?: {
    type?: any;
}): (target: any, key: string) => void;
/**
 * lazy inject
 * type: class or string
 * always: always read from context. default: false
 * subClass: getSubClasses. default: false
 * @param {{ type: any, always: boolean, subClass: boolean }} { type, always = false, subClass = false }
 * @returns
 * @memberof Decorators
 */
export declare function lazyInject({ type, always, subClass }?: {
    type?: any;
    always?: boolean;
    subClass?: boolean;
}): (target: any, key: string) => void;
/**
 * lazy inject subClass, the abbreviation of lazy inject
 * type: class or string
 * always: always read from context. default: false
 * @param {{ type: any, always: boolean }} { type, always = false }
 * @returns
 * @memberof Decorators
 */
export declare function lazyInjectSubClass({ type, always }?: {
    type: any;
    always?: boolean;
}): (target: any, key: string) => void;
