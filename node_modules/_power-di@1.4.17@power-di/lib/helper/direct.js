"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var utils_1 = require("../utils");
/**
 * inject
 * type: class or string
 * @param {{ type: any }} { type }
 * @returns
 * @memberof Decorators
 */


function inject() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      type = _ref.type;

  return function (target, key) {
    var globalType = utils_1.getGlobalTypeByDecorator(type, target, key);
    utils_1.getMetadata(target).injects.push({
      key: key,
      globalType: globalType,
      type: 'inject',
      typeCls: utils_1.getClsTypeByDecorator(type, target, key)
    });
  };
}

exports.inject = inject;
/**
 * lazy inject
 * type: class or string
 * always: always read from context. default: false
 * subClass: getSubClasses. default: false
 * @param {{ type: any, always: boolean, subClass: boolean }} { type, always = false, subClass = false }
 * @returns
 * @memberof Decorators
 */

function lazyInject() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      type = _ref2.type,
      _ref2$always = _ref2.always,
      always = _ref2$always === void 0 ? false : _ref2$always,
      _ref2$subClass = _ref2.subClass,
      subClass = _ref2$subClass === void 0 ? false : _ref2$subClass;

  return function (target, key) {
    var globalType = utils_1.getGlobalTypeByDecorator(type, target, key);
    utils_1.getMetadata(target).injects.push({
      key: key,
      globalType: globalType,
      type: 'lazyInject',
      always: always,
      subClass: subClass,
      typeCls: utils_1.getClsTypeByDecorator(type, target, key)
    });
  };
}

exports.lazyInject = lazyInject;
/**
 * lazy inject subClass, the abbreviation of lazy inject
 * type: class or string
 * always: always read from context. default: false
 * @param {{ type: any, always: boolean }} { type, always = false }
 * @returns
 * @memberof Decorators
 */

function lazyInjectSubClass() {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    type: undefined
  },
      type = _ref3.type,
      _ref3$always = _ref3.always,
      always = _ref3$always === void 0 ? false : _ref3$always;

  return lazyInject({
    type: type,
    always: always,
    subClass: true
  });
}

exports.lazyInjectSubClass = lazyInjectSubClass;