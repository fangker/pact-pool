"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var IocContext_1 = require("../IocContext");

var utils_1 = require("../utils");

exports.getClsTypeByDecorator = utils_1.getClsTypeByDecorator;
exports.getGlobalTypeByDecorator = utils_1.getGlobalTypeByDecorator;

var direct_1 = require("./direct");

var Decorators =
/*#__PURE__*/
function () {
  function Decorators() {
    var ioc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : IocContext_1.IocContext.DefaultInstance;

    _classCallCheck(this, Decorators);

    this._funcContext = false;
    this._context = ioc;
    this._funcContext = typeof this._context === 'function';
    this.register = this.register.bind(this);
    this.registerSubClass = this.registerSubClass.bind(this);
    this.append = this.append.bind(this);
    this.inject = this.inject.bind(this);
    this.lazyInject = this.lazyInject.bind(this);
    this.lazyInjectSubClass = this.lazyInjectSubClass.bind(this);
  }

  _createClass(Decorators, [{
    key: "register",

    /**
     * register class
     * @param target need a class
     * @param options RegisterOptions
     */
    value: function register(key, options) {
      var _this = this;

      return function (target) {
        _this.context.register(target, key, options);
      };
    }
    /**
     * register subClass, the abbreviation of register
     * @param target need a class
     * @param options RegisterOptions
     */

  }, {
    key: "registerSubClass",
    value: function registerSubClass(key, options) {
      var _this2 = this;

      return function (target) {
        _this2.context.register(target, key, Object.assign({}, options, {
          regInSuperClass: true
        }));
      };
    }
    /**
     * append class to subClass list by key
     * @param key class or string
     * @param options RegisterOptions
     */

  }, {
    key: "append",
    value: function append(key, options) {
      var _this3 = this;

      return function (target) {
        _this3.context.append(key, target, options);
      };
    }
    /**
     * inject
     * type: class or string
     * @param {{ type: any }} { type }
     * @returns
     * @memberof Decorators
     */

  }, {
    key: "inject",
    value: function inject() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var decoratorThis = this;
      return function (target, key) {
        direct_1.inject(data)(target, key);
        Object.defineProperty(target, key, {
          configurable: true,
          get: function get() {
            decoratorThis.context.inject(this);
            return this[key];
          },
          set: function set(value) {
            Object.defineProperty(this, key, {
              configurable: true,
              writable: true,
              value: value
            });
          }
        });
      };
    }
    /**
     * lazy inject
     * type: class or string
     * always: always read from context. default: false
     * subClass: getSubClasses. default: false
     * @param {{ type: any, always: boolean, subClass: boolean }} { type, always = false, subClass = false }
     * @returns
     * @memberof Decorators
     */

  }, {
    key: "lazyInject",
    value: function lazyInject() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var decoratorThis = this;
      return function (target, key) {
        direct_1.lazyInject(data)(target, key);
        var defaultValue = target[key];
        Object.defineProperty(target, key, {
          configurable: true,
          get: function get() {
            Object.defineProperty(target, key, {
              configurable: true,
              writable: true,
              value: defaultValue
            });
            decoratorThis.context.inject(target);
            return this[key];
          },
          set: function set(value) {
            Object.defineProperty(this, key, {
              configurable: true,
              writable: true,
              value: value
            });
          }
        });
      };
    }
    /**
     * lazy inject subClass, the abbreviation of lazy inject
     * type: class or string
     * always: always read from context. default: false
     * @deprecated use direct @lazyInjectSubClass instead.
     * @param {{ type: any, always: boolean }} { type, always = false }
     * @returns
     * @memberof Decorators
     */

  }, {
    key: "lazyInjectSubClass",
    value: function lazyInjectSubClass() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        type: undefined
      },
          type = _ref.type,
          _ref$always = _ref.always,
          always = _ref$always === void 0 ? false : _ref$always;

      return this.lazyInject({
        type: type,
        always: always,
        subClass: true
      });
    }
  }, {
    key: "context",
    get: function get() {
      if (this._funcContext) {
        return this._context();
      } else {
        return this._context;
      }
    }
  }]);

  return Decorators;
}();

exports.Decorators = Decorators;

function getDecorators() {
  var ioc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : IocContext_1.IocContext.DefaultInstance;
  return new Decorators(ioc);
}

exports.getDecorators = getDecorators;